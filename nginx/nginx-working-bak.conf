# NGINX configuration with location blocks to handle SPA routing and caching,
# and lots of comments to ease syntax understanding. It also uses a new feature 
# in NGINX docker image injects container runtime environment into this file.
# See the following links:
# https://www.nginx.com/resources/wiki/start/topics/examples/full/
# https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/
# https://create-react-app.dev/docs/production-build/
# https://github.com/docker-library/docs/tree/master/nginx#using-environment-variables-in-nginx-configuration-new-in-119

# Note that the contents of this file (/etc/nginx/conf.d/default.conf) are 
# already included by NGINX's main config (/etc/nginx.conf) in an http block,
# which is the configuration context of an HTTP server.

# Configuration context of a virtual server.
server {
  # Listening port.
  listen 80;
  # Root directory to search and serve public web files. All web files such
  # as "index.html" and assets must be inside that folder.
  root /usr/share/nginx/html;
  # Directory listing is disabled in NGINX by default. Instead, if a request
  # ends with a slash, NGINX treats it as a request for a  directory and looks
  # for an index file in that directory. The index directive defines the index
  # file’s name (the default value is "index.html"). Directory listing can be
  # activated by setting the directive "autoindex on;".
  index index.html;
  # Add "charset=utf-8" to the "Content-Type" response header.
  charset utf-8;

  # Enable gzip compresssion.
  gzip on;
  # By default, NGINX compresses responses only with MIME type text/html.
  # Specify additional types that are relevant for this project.
  gzip_types text/plain application/javascript text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype font/ttf font/woff font/woff2;
  # Disable compression for browsers that do not support it (IE4–6).
  gzip_disable "msie6";
  # Include response header "Vary: Accept-Encoding" to let the browser decide
  # whether it will accept gzip or not.
  gzip_vary on;
  # Compress responses to proxied requests (requests that come from a proxy
  # server) in the following cases: responses that will not be cached on the
  # proxy server, responses that are expired, and authorized responses that
  #  are specific to the end user (checks for the Authorization header field).
  gzip_proxied no-cache no-store private expired auth;
  # Compresssion level (1-9). 6 is typical. More compression = more work.
  gzip_comp_level 6;
  # Number and size of buffers used to compress a response. 16 8k is typical.
  gzip_buffers 16 8k;
  # Minimum length of the response to compress (in bytes). The default is 20,
  # which is too small to get any benefit from compression.
  gzip_min_length 1000;

  # -------------------------------------------------------------------------
  # The following location matching is very simple since we're not using any
  # of the special matching modifiers for exact (=), regular expression (~*),
  # or longest non-RE (^~) matching. Instead, the location block with the
  # longest prefix match is chosen.
  # -------------------------------------------------------------------------

  # Match any file/directory with the "/"" prefix. If the location starts with
  # "/static", it will execute the next location below and not this one. This
  # block is for service files such as "index.html", service worker, manifest
  # and config. Those files have fixed names (without appended hashes) and
  # their contents may change. Therefore, we never want those files to be
  # cached to avoid the browser running an old version of the app/config.
  location / {
    # First attempt to serve the requested file otherwise default to the root
    # "index.html" file. This is necessary since this is an SPA with only one
    # "index.html" at the root and browser routing using HTML5 History API.
    try_files $uri /index.html;
    # Replace placeholder in "index.html" with "API_URL" environment variable.
    # Note that "sub_filter_once" is off by default, i.e. replace once and stop.
    # Also, "sub_filter" only works on "text/html" type by default, so it will
    # not try to replace that string in files that are not "*.html". See below:
    # https://create-react-app.dev/docs/title-and-meta-tags#injecting-data-from-the-server-into-the-page
    #COMMENTED: sub_filter "__API_URL__" "'${API_URL}'";
    # Preserve the “Last-Modified” header field from the original response 
    # during placeholder string replacement to facilitate response caching. 
    #COMMENTED: sub_filter_last_modified on;
    # Add headers to prevent caching of the resources. Note that for supporting
    # only newer browsers, "no-store" is enough. See below for more info:
    # https://stackoverflow.com/a/2068407
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    # Add header "Expires: 0" to say that the resource is already expired.
    expires 0;
    # "Pragma: no-cache" is an old header in HTTP/1.0 spec, but is added as
    # an OWASP security recommendation. See below:
    # https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses
    add_header Pragma "no-cache";
  }

  location ^~ /apps/carpool {
    #alias /var/www/myapp/build;
    try_files $uri $uri/ /apps/carpool/index.html;
  }

  # Match any file/directory with the "/static" prefix. This is normally for
  # all static assets built by CRA/webpack. In this case, we want to maximize
  # caching because CRA/webpack appends hashes to file names to do explicit
  # cache busting when file contents change. Also, in this case, if a file or
  # directory is not found, it just returns 404 (default behavior).
  location /static {
    # Add header "Expires: [after one year]" to make use of long-term caching.
    expires 1y;
    # Set cache to public so any system can cache the files, since there is
    # nothing sensitive in them. This might be different in a server-rendered
    # page that might contain user information. Also set cache to immutable
    # to indicate the resource will not change before its expiry.
    add_header Cache-Control "public, immutable";
  }
}